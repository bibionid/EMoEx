##############################################################################
##Earlham Motif Extrapolation Pipeline (EMotEP)
##Snakefile
##
##A Pipeline to lift over putative binding site predicitons from ChIP-seq data
##
##Will Nash
##Github: https://github.com/bibionid/
##will.nash@earlham.ac.uk
##############################################################################

configfile: "config/emotep_config.yaml"

work_dir   = config["workdir"]
output_dir = config["outdir"]

script_dir = "workflow/scripts"

shell.suffix("; sleep 30")
shell.prefix("set -e; set -o pipefail; ")

import os

gtrd_bb  = "inputs/dmel_inputs/GTRD_INPUT/7UP1_P16375_Meta-clusters_1408.bb"
gtrd_bed = os.path.basename(gtrd_bb).replace('.bb', '.bed')

# Define all outputs
rule all:
    input:
        expand("{INPUT_GENOME}.singleLine.simpleHeader", INPUT_GENOME = config['target_genome']['sequences']),
        expand("{INPUT_ANNOT}.protein_coding.bed", INPUT_ANNOT = config['target_genome']['annotation']),
        expand("{OUTPUT_DIR}/cisRegions.bed", OUTPUT_DIR = output_dir),
        expand("{OUTPUT_DIR}/cisRegions_lengthDist.pdf", OUTPUT_DIR = output_dir),
        expand("{OUTPUT_DIR}/cisRegions.fasta", OUTPUT_DIR = output_dir),
        expand("{OUTPUT_DIR}/GTRD_BED/{GTRD_BIGBED_FILE}",OUTPUT_DIR = output_dir, GTRD_BIGBED_FILE = gtrd_bed),
        expand("{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.upstream_genes", OUTPUT_DIR = output_dir, GTRD_BIGBED_FILE = gtrd_bed),
        expand("{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.downstream_genes", OUTPUT_DIR = output_dir, GTRD_BIGBED_FILE = gtrd_bed),
        expand("{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.closest", OUTPUT_DIR = output_dir, GTRD_BIGBED_FILE = gtrd_bed),
        expand("{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.closest.fasta", OUTPUT_DIR = output_dir, GTRD_BIGBED_FILE = gtrd_bed)

# Prepare genome sequences for the pipeline
rule sequencePrep:
    input:
        TARGET_GENOME_SEQUENCES = config['target_genome']['sequences']
    conda:
        "envs/emotep.yaml"
    output:
        expand("{INPUT_GENOME}.singleLine.simpleHeader", INPUT_GENOME = config['target_genome']['sequences'])
    shell:
        "bash {script_dir}/sequencePrep.sh {input.TARGET_GENOME_SEQUENCES}"

#convert gff/gff3 annotation to modified bed
rule annotPrep:
    input:
        TARGET_GENE_ANNOTATIONS = config['target_genome']['annotation']
    conda:
        "envs/emotep.yaml"
    output:
        expand("{INPUT_ANNOT}.protein_coding.bed", INPUT_ANNOT = config['target_genome']['annotation'])
    shell:
        "bash {script_dir}/annotationPrep.sh {input.TARGET_GENE_ANNOTATIONS}"

# Use gene annotations to call user deifined cis regions
rule callCisRegions:
    input:
        TARGET_GENOME_SEQUENCES = expand("{INPUT_GENOME}.singleLine.simpleHeader", INPUT_GENOME = config['target_genome']['sequences']),
        TARGET_GENE_ANNOTATIONS = expand("{INPUT_ANNOT}.protein_coding.bed", INPUT_ANNOT = config['target_genome']['annotation'])
    params:
        CIS_REGION = config['cis_region']
    conda:
        "envs/emotep.yaml"
    output:
        "{OUTPUT_DIR}/cisRegions.bed"
    shell:
        "python3 {script_dir}/cisRegion.py {input.TARGET_GENE_ANNOTATIONS} {input.TARGET_GENOME_SEQUENCES} {params.CIS_REGION} {wildcards.OUTPUT_DIR}"

# Plot the distribution of the length regions extracted
rule visualiseCisRegionLengthDist:
    input:
        CIS_REGION_ANNOTATION = "{OUTPUT_DIR}/cisRegions.bed"
    output:
        "{OUTPUT_DIR}/cisRegions_lengthDist.pdf"
    conda:
        "envs/emotep.yaml"
    shell:
        "python3 {script_dir}/cisRegion_displot.py {input.CIS_REGION_ANNOTATION} {wildcards.OUTPUT_DIR}" #source activate /ei/software/testing/python_miniconda/4.9.2_py3.8_wn/x86_64/envs/emotep_hpc/

# Extract the sequences in FASTA format, reverse complement -ve strand cisRegions
rule extractCisRegionSequences:
    input:
        CIS_REGION_ANNOTATION   = "{OUTPUT_DIR}/cisRegions.bed",
        TARGET_GENOME_SEQUENCES = config['target_genome']['sequences']
    output:
        "{OUTPUT_DIR}/cisRegions.fasta"
    conda:
        "envs/emotep.yaml"
    shell:
        "bedtools getfasta -fi {input.TARGET_GENOME_SEQUENCES} -bed {input.CIS_REGION_ANNOTATION} -fo {output} -s -name"

# Prepare the GTRD binding event information for further steps
rule prepareGTRDraw:
    input:
        GTRD_BIGBED = gtrd_bb,
        GTRD_SCHEMA = 'inputs/dmel_inputs/dmel6_GTRD20-06_trackDb.txt',
        REFERENCE_GENE_ANNOTATIONS = config['reference_genome']['annotation']
    output:
        "{OUTPUT_DIR}/GTRD_BED/{GTRD_BIGBED_FILE}"
    conda:
        "envs/emotep_GTRD_bigbed.yaml" #differnet conda env as pyBigWig uses python 3.7
    shell:
        "python3 {script_dir}/GTRD_parse_bigBed.py {input.GTRD_BIGBED} {input.GTRD_SCHEMA} {input.REFERENCE_GENE_ANNOTATIONS} {wildcards.OUTPUT_DIR}"

# Extract the genes within a 10kb window around binding events not within genic space, find closest up- and downstream
rule extractClosestGenes:
    input:
        BINDING_EVENT_ANNOTATIONS  = "{OUTPUT_DIR}/GTRD_BED/{GTRD_BIGBED_FILE}",
        REFERENCE_GENE_ANNOTATIONS = config['reference_genome']['annotation']
    output:
        STEP_ONE = temp("{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.itermed.bed"),
        STEP_TWO = temp("{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.itermed.bed2"),
        STEP_THR = temp("{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.itermed.bed3.sorted"),
        STEP_THR_US = temp("{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.itermed.bed3.sorted.US"),
        STEP_THR_DS = temp("{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.itermed.bed3.sorted.DS"),
        UPSTREAM   = "{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.upstream_genes",
        DOWNSTREAM = "{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.downstream_genes"
    conda:
        "envs/emotep.yaml"
    shell:
        "bedtools window -w 10000 -a {input.BINDING_EVENT_ANNOTATIONS} -b {input.REFERENCE_GENE_ANNOTATIONS} > {output.STEP_ONE} \
        #curate the next .bed file\
        && cut -f6- {output.STEP_ONE} >  {output.STEP_TWO}\
        && sort -k1,1 -k2,2n  {output.STEP_TWO} > {output.STEP_THR} \
        && bedtools closest -io -id -D ref -a {input.BINDING_EVENT_ANNOTATIONS} -b {output.STEP_THR} > {output.STEP_THR_US} \
        && bedtools intersect -v -a {output.STEP_THR_US} -b {input.REFERENCE_GENE_ANNOTATIONS} > {output.UPSTREAM} \
        && bedtools closest -io -iu -D ref -a {input.BINDING_EVENT_ANNOTATIONS} -b {output.STEP_THR} > {output.STEP_THR_DS} \
        && bedtools intersect -v -a {output.STEP_THR_DS} -b {input.REFERENCE_GENE_ANNOTATIONS} > {output.DOWNSTREAM}"

# Filter the closest gene annotaions based on strand and proximity
rule filterClosestGenes:
    input:
        UPSTREAM   = "{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.upstream_genes",
        DOWNSTREAM = "{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.downstream_genes"
    params:
        CIS_REGION = config['cis_region']
    output:
        "{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.closest"
    conda:
        "envs/emotep.yaml"
    shell:
        "python3 {script_dir}/GTRD_parse_closest.py {input.UPSTREAM} {input.DOWNSTREAM} {params.CIS_REGION} {output}"

# Extract the sequences under the binding event ChIP-seq GTRD_peaks
rule extractPeakSeqs:
    input:
        BINDING_EVENT_ANNOTATIONS  = "{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.closest",
        REFERENCE_GENOME_SEQUENCES = expand("{INPUT_GENOME}.singleLine.simpleHeader", INPUT_GENOME = config['reference_genome']['sequences'])
    output:
        "{OUTPUT_DIR}/{GTRD_BIGBED_FILE}.closest.fasta"
    conda:
        "envs/emotep.yaml"
    shell:
        "bedtools getfasta -s -name -fi {input.REFERENCE_GENOME_SEQUENCES} -bed {input.BINDING_EVENT_ANNOTATIONS} -fo {output} "
